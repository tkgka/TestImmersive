#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Sphere_Left", "Sphere_Right", "GridMaterial", "Cube", "Stereoscopic"]
    def Sphere "Sphere_Right" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GridMaterial/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.5, 1.5, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Sphere "Sphere_Left" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GridMaterial/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.5, 1.5, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
                int ui:nodegraph:node:stackingOrder = 1500
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 1500
            }
        }
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (5, 3, 2.220446e-16)
        float3 xformOp:translate = (0.00905367, 1.3269444, -1.1888472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Xform "Stereoscopic" (
        active = true
    )
    {
        def Material "stereoscopicMetrial"
        {
            asset inputs:leftImage (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-735.0586, -82.19922)
                        float2 sizeInSubgraph = (127, 53)
                        int stackingOrderInSubgraph = 105
                    }
                }
            )
            asset inputs:rightImage (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-731.34766, 180.70703)
                        float2 sizeInSubgraph = (135.5, 53)
                        int stackingOrderInSubgraph = 106
                    }
                }
            )
            prepend token outputs:mtlx:surface.connect = </Root/Stereoscopic/stereoscopicMetrial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 11

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Stereoscopic/stereoscopicMetrial/GeometrySwitchCameraIndex.outputs:out>
                float inputs:metallic
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (74.25, 99.5)
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            def Shader "GeometrySwitchCameraIndex"
            {
                uniform token info:id = "ND_realitykit_geometry_switch_cameraindex_color3"
                color3f inputs:left.connect = </Root/Stereoscopic/stereoscopicMetrial/TiledImage.outputs:out>
                color3f inputs:mono
                color3f inputs:right.connect = </Root/Stereoscopic/stereoscopicMetrial/TiledImage_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-212.75, 33.015625)
                float2 ui:nodegraph:node:size = (237, 145)
                int ui:nodegraph:node:stackingOrder = 87
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "TiledImage"
            {
                uniform token info:id = "ND_tiledimage_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/Stereoscopic/stereoscopicMetrial.inputs:leftImage>
                string inputs:filtertype
                float2 inputs:texcoord
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-481.91052, -50.652714)
                float2 ui:nodegraph:node:size = (158.5, 235)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "TiledImage_1"
            {
                uniform token info:id = "ND_tiledimage_color3"
                color3f inputs:default
                asset inputs:file.connect = </Root/Stereoscopic/stereoscopicMetrial.inputs:rightImage>
                string inputs:filtertype
                float2 inputs:realworldimagesize
                float2 inputs:realworldtilesize
                float2 inputs:texcoord
                float2 inputs:uvoffset
                float2 inputs:uvtiling
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-490.41443, 236.51135)
                float2 ui:nodegraph:node:size = (158.5, 235)
                int ui:nodegraph:node:stackingOrder = 104
            }
        }
    }
}

